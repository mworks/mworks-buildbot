#!/usr/bin/env python3

from buildbot.plugins import *

import master_config
import passwords


################################################################################
#
# Global configuration
#
################################################################################


c = BuildmasterConfig = {}

www_port = 8010

c['title'] = 'MWorks'
c['titleURL'] = 'https://mworks.github.io/'
c['buildbotURL'] = 'http://%s:%d/' % (master_config.hostname, www_port)
c['buildbotNetUsageData'] = None
c['db'] = {'db_url': 'sqlite:///state.sqlite'}

c['www'] = {
    'port': www_port,
    'plugins': {
        'atom_feed': {
            'builders': [],
            },
        },
    'auth': util.UserPasswordAuth({'mwdev': passwords.www_pass}),
    'authz': util.Authz(
        allowRules = [util.AnyControlEndpointMatcher(role='admins')],
        roleMatchers = [util.RolesFromUsername(roles=['admins'],
                                               usernames=['mwdev'])],
        ),
    }

c['properties'] = {
    'MW_VERSION': 'TEST',
    'MW_IOS_SERVER_ADDRESS': '',
    }


################################################################################
#
# Build workers
#
################################################################################


workers = {
    'macpro_5_1': [
        'macos',
        'itc18',
        'ne500',
        'nidaq',
        'usbhid_gamepad',
        'usbhid_joystick',
        ],

    'macpro_6_1': [
        'macos',
        'firmata',
        ],

    'macmini_8_1': [
        'macos',
        'firmata_ble',
        ],
}

primary_workername = 'macpro_5_1'
build_workername = 'macmini_8_1'

c['workers'] = [worker.Worker(name, passwords.worker_pass[name])
                for name in workers]
c['protocols'] = {'pb': {'port': master_config.worker_port}}


################################################################################
#
# Build steps
#
################################################################################


installer_filename = 'MWorks-%(prop:MW_VERSION)s.dmg'
installer_workersrc = '/tmp/mw_installer/' + installer_filename
installer_masterdest = 'installers/' + installer_filename
installer_path = '/Volumes/MWorks %(prop:MW_VERSION)s/'

hdiutil = '/usr/bin/hdiutil'
sudo = '/usr/bin/sudo'

python3 = '/usr/local/bin/python3'

mw_test = '/Library/Application Support/MWorks/Developer/bin/mw_test'


build_builder_steps = (

    ('build_for_macos', build_workername, [

        steps.Git(
            repourl = 'https://github.com/mworks/mw_suite.git',
            submodules = True,
            haltOnFailure = True,
            ),

        steps.ShellCommand(
            workdir = 'build/mworks/build',
            command = [
                python3,
                'build_mworks',
                util.Interpolate('--mw-version=%(prop:MW_VERSION)s'),
                ],
            description = ['building'],
            descriptionDone = ['build'],
            haltOnFailure = True,
            ),

        steps.ShellCommand(
            workdir = 'build/mworks/build/installer',
            command = [
                python3,
                'build_installer',
                '--sign', passwords.signing_name,
                util.Interpolate('%(prop:MW_VERSION)s'),
                ],
            description = ['building', 'installer'],
            descriptionDone = ['installer'],
            haltOnFailure = True,
            ),

        steps.ShellCommand(
            workdir = 'build/mworks/build/installer',
            command = [
                python3,
                'notarize_installer',
                '--username', passwords.notarization_username,
                '--password', passwords.notarization_password,
                util.Interpolate(installer_workersrc),
                ],
            description = ['notarizing', 'installer'],
            descriptionDone = ['notarize'],
            flunkOnFailure = False,
            warnOnFailure = True,
            ),

        steps.ShellCommand(
            doStepIf = (lambda s: s.getProperty('MW_VERSION') == 'NIGHTLY'),
            command = [
                '/usr/local/bin/aws',
                's3',
                'cp',
                '--acl', 'public-read',
                util.Interpolate(installer_workersrc),
                util.Interpolate('s3://mworks-downloads/nightly/' +
                                 installer_filename),
                ],
            description = ['publishing', 'installer'],
            descriptionDone = ['publish'],
            flunkOnFailure = False,
            warnOnFailure = True,
            ),

        steps.FileUpload(
            workersrc = util.Interpolate(installer_workersrc),
            masterdest = util.Interpolate(installer_masterdest),
            mode = 0o644,
            ),

        ]),

    ('build_for_ios', build_workername, [

        steps.Git(
            repourl = 'https://github.com/mworks/mworks.git',
            submodules = True,
            haltOnFailure = True,
            ),

        steps.ShellCommand(
            workdir = 'build/build',
            command = [python3, 'build_for_ios'],
            description = ['building'],
            descriptionDone = ['build'],
            ),

        ]),

    )


test_builder_steps = tuple(

    ('test_on_' + worker_name, worker_name, (

            [] if (worker_name == build_workername) else [

            # Remove any existing installer DMG before downloading.  If we
            # don't, then the extended attribute com.apple.diskimages.recentcksum
            # on the existing file may be carried over to the new one and
            # prevent it from mounting.
            steps.ShellCommand(
                command = ['/bin/rm', '-f', util.Interpolate(installer_filename)],
                description = ['removing', 'previous', 'dmg'],
                descriptionDone = ['remove', 'previous',  'dmg'],
                haltOnFailure = True,
                ),

            steps.FileDownload(
                mastersrc = util.Interpolate(installer_masterdest),
                workerdest = util.Interpolate(installer_filename),
                haltOnFailure = True,
                ),

            steps.ShellCommand(
                command = [hdiutil, 'attach', util.Interpolate(installer_filename)],
                description = ['attaching', 'dmg'],
                descriptionDone = ['attach', 'dmg'],
                haltOnFailure = True,
                ),

            steps.ShellCommand(
                command = [
                    sudo,
                    util.Interpolate(installer_path + 'Uninstall MWorks'),
                    '--delete',
                    ],
                description = ['uninstalling'],
                descriptionDone = ['uninstall'],
                ),

            steps.ShellCommand(
                command = [
                    sudo,
                    '/usr/sbin/installer',
                    '-verbose',
                    '-package', util.Interpolate(installer_path + 'MWorks.pkg'),
                    '-target', '/',
                    ],
                description = ['installing'],
                descriptionDone = ['install'],
                ),

            steps.ShellCommand(
                command = [hdiutil, 'detach', util.Interpolate(installer_path)],
                description = ['detaching', 'dmg'],
                descriptionDone = ['detach', 'dmg'],
                ),

            ]) + [

            steps.ShellCommand(
                command = [
                    python3,
                    mw_test,
                    '--features=' + ','.join(workers[worker_name]),
                    ],
                decodeRC = {
                    0: util.SUCCESS,
                    1: util.FAILURE,
                    2: util.WARNINGS,
                    },
                description = ['testing'],
                descriptionDone = ['test'],
                warnOnWarnings = True,
                ),

            ])
    for worker_name in workers

    ) + (

    ('test_on_ios', build_workername, [

            steps.ShellCommand(
                doStepIf = (lambda s: s.getProperty('MW_IOS_SERVER_ADDRESS')),
                command = [
                    python3,
                    mw_test,
                    '--features=ios,firmata_ble',
                    util.Interpolate('--server-address='
                                     '%(prop:MW_IOS_SERVER_ADDRESS)s'),
                    '--skip-unit-tests',
                    ],
                decodeRC = {
                    0: util.SUCCESS,
                    1: util.FAILURE,
                    2: util.WARNINGS,
                    },
                description = ['testing'],
                descriptionDone = ['test'],
                warnOnWarnings = True,
                ),

        ]),

    )


aggregate_builder_steps = tuple(

    (builder_name, primary_workername, [
        steps.Trigger(
            schedulerNames = scheduler_names,
            waitForFinish = True,
            updateSourceStamp = False,
            set_properties = {
                'MW_VERSION': util.Property('MW_VERSION'),
                'MW_IOS_SERVER_ADDRESS': util.Property('MW_IOS_SERVER_ADDRESS'),
                },
            haltOnFailure = True,
            )
        for scheduler_names in step_schedulers
        ])
    for builder_name, step_schedulers in
    (
        ('build_all', tuple([step[0]] for step in build_builder_steps)),
        ('test_all', ([step[0] for step in test_builder_steps],)),
        ('build_and_test_all', (['build_all'], ['test_all'])),
        )

    )


################################################################################
#
# Builders and schedulers
#
################################################################################


c['builders'] = []
c['schedulers'] = [] 


for builder_info in (build_builder_steps,
                     test_builder_steps,
                     aggregate_builder_steps):

    for builder_name, worker_name, builder_steps in builder_info:
        c['builders'].append(util.BuilderConfig(
            name = builder_name,
            workername = worker_name,
            factory = util.BuildFactory(builder_steps),
            ))

        c['schedulers'].append(schedulers.Triggerable(
            name = builder_name,
            builderNames = [builder_name],
            ))

        c['schedulers'].append(schedulers.ForceScheduler(
            name = 'force_' + builder_name,
            builderNames = [builder_name],
            properties = [
                util.StringParameter(name = 'MW_VERSION',
                                     label = 'MWorks version:',
                                     default = 'TEST'),
                util.StringParameter(name = 'MW_IOS_SERVER_ADDRESS',
                                     label = 'iOS server address:',
                                     default = ''),
                ],
            ))

        if (builder_name.startswith('build_for_') or
            builder_name.startswith('test_on_')):
            c['www']['plugins']['atom_feed']['builders'].append(builder_name)


c['schedulers'].append(schedulers.Nightly(
    name = 'nightly_build_and_test',
    builderNames = ['build_and_test_all'],
    branch = None,
    hour = 0,
    dayOfWeek = [0,1,2,3,4],  # Weekdays only
    properties = {
        'MW_VERSION': 'NIGHTLY',
        },
    ))
