#!/usr/bin/python

from buildbot.buildslave import BuildSlave
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Interpolate
from buildbot.scheduler import Nightly, Triggerable
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.status.html import WebStatus
from buildbot.status.web.auth import BasicAuth
from buildbot.status.web.authz import Authz
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileDownload, FileUpload
from buildbot.steps.trigger import Trigger

import master_config as config
from passwords import slave_pass, webstatus_pass



################################################################################
#
# General settings
#
################################################################################



c = BuildmasterConfig = {}

webstatus_port = 8010

c['projectName'] = 'MWorks'
c['projectURL'] = 'http://mworks-project.org/'
c['buildbotURL'] = 'http://%s:%d/' % (config.hostname, webstatus_port)

authz = Authz(
    auth = BasicAuth([('mwdev', webstatus_pass)]),
    forceBuild = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
    cancelAllPendingBuilds = True,
    )

c['status'] = [WebStatus(http_port=webstatus_port, authz=authz)]

c['properties'] = {
    'MW_VERSION': 'TEST',
    }

installer_filename = 'MWorks-%(prop:MW_VERSION)s.dmg'
installer_slavesrc = '/tmp/mw_installer/' + installer_filename
installer_masterdest = ('/Library/WebServer/Documents/mw/' +
                        installer_filename)
installer_path = '/Volumes/MWorks %(prop:MW_VERSION)s/'

hdiutil = '/usr/bin/hdiutil'
sudo = '/usr/bin/sudo'

mw_test = '/Library/Application Support/MWorks/Developer/bin/mw_test'



################################################################################
#
# Build slaves
#
################################################################################



primary_slavename = 'macpro_5_1'
build_slavename = 'imac_14_3'

slave_names = [
    primary_slavename,
    build_slavename,
    'macmini_6_2',
    ]

slave_features = {
    primary_slavename: [
        'itc18',
        'ne500',
        'nidaq',
        'usbhid_gamepad',
        'usbhid_joystick',
        ],
}

c['slaves'] = [BuildSlave(name, slave_pass[name]) for name in slave_names]
c['slavePortnum'] = config.slave_port



################################################################################
#
# Build steps
#
################################################################################



build_builder_steps = (

    ('build_all', build_slavename, [

        Git(
            repourl = 'git://github.com/mworks/mw_suite.git',
            submodules = True,
            haltOnFailure = True,
            ),

        ShellCommand(
            workdir = 'build/mworks/build',
            command = [
                './build_mworks',
                Interpolate('--mw-version=%(prop:MW_VERSION)s'),
                ],
            description = ['building'],
            descriptionDone = ['build'],
            haltOnFailure = True,
            ),

        ShellCommand(
            workdir = 'build/mworks/build/installer',
            command = [
                './build_installer',
                Interpolate('%(prop:MW_VERSION)s'),
                ],
            description = ['building', 'installer'],
            descriptionDone = ['installer'],
            haltOnFailure = True,
            ),

        FileUpload(
            slavesrc = Interpolate(installer_slavesrc),
            masterdest = Interpolate(installer_masterdest),
            mode = 0644,
            ),

        ]),

    )


test_builder_steps = tuple(

    ('test_on_' + slave_name, slave_name, (

            [] if (slave_name == build_slavename) else [

            FileDownload(
                mastersrc = Interpolate(installer_masterdest),
                slavedest = Interpolate(installer_filename),
                haltOnFailure = True,
                ),

            ShellCommand(
                command = [hdiutil, 'attach', Interpolate(installer_filename)],
                description = ['attaching', 'dmg'],
                descriptionDone = ['attach', 'dmg'],
                haltOnFailure = True,
                ),

            ShellCommand(
                command = [
                    sudo,
                    Interpolate(installer_path + 'Uninstall MWorks'),
                    '--delete',
                    ],
                description = ['uninstalling'],
                descriptionDone = ['uninstall'],
                ),

            ShellCommand(
                command = [
                    sudo,
                    '/usr/sbin/installer',
                    '-verbose',
                    '-package', Interpolate(installer_path + 'MWorks.pkg'),
                    '-target', '/',
                    ],
                description = ['installing'],
                descriptionDone = ['install'],
                ),

            ShellCommand(
                command = [hdiutil, 'detach', Interpolate(installer_path)],
                description = ['detaching', 'dmg'],
                descriptionDone = ['detach', 'dmg'],
                ),

            ]) + [

            ShellCommand(
                command = [
                    mw_test,
                    '--arch=' + arch_name,
                    ('--features=' +
                     ','.join(slave_features.get(slave_name, []))),
                    ],
                description = ['testing', arch_name],
                descriptionDone = ['test', arch_name],
                )
            for arch_name in ('x86_64',)

            ])
    for slave_name in slave_names

    )


aggregate_builder_steps = tuple(

    (builder_name, primary_slavename, [
        Trigger(
            schedulerNames = scheduler_names,
            waitForFinish = True,
            updateSourceStamp = False,
            copy_properties = ['MW_VERSION'],
            haltOnFailure = True,
            )
        for scheduler_names in step_schedulers
        ])
    for builder_name, step_schedulers in
    (
        ('test_all', ([step[0] for step in test_builder_steps],)),
        ('build_and_test_all', (['build_all'], ['test_all'])),
        )

    )



################################################################################
#
# Builders and schedulers
#
################################################################################



c['builders'] = []
c['schedulers'] = [] 


for builder_info in (build_builder_steps,
                     test_builder_steps,
                     aggregate_builder_steps):

    for builder_name, slave_name, builder_steps in builder_info:
        c['builders'].append(BuilderConfig(
            name = builder_name,
            slavename = slave_name,
            factory = BuildFactory(builder_steps),
            ))

        c['schedulers'].append(Triggerable(
            name = builder_name,
            builderNames = [builder_name],
            ))


c['schedulers'].append(Nightly(
    name = 'nightly_build_and_test',
    builderNames = ['build_and_test_all'],
    branch = None,
    hour = 0,
    dayOfWeek = [0,1,2,3,4],  # Weekdays only
    properties = {
        'MW_VERSION': 'NIGHTLY',
        },
    ))


c['schedulers'].append(ForceScheduler(
    name = 'force_build_all',
    builderNames = ['build_all'],
    ))


for name in slave_names:
    c['schedulers'].append(ForceScheduler(
        name = 'force_test_on_' + name,
        builderNames = ['test_on_' + name],
        ))


c['schedulers'].append(ForceScheduler(
    name = 'force_test_all',
    builderNames = ['test_all'],
    ))


c['schedulers'].append(ForceScheduler(
    name = 'force_build_and_test_all',
    builderNames = ['build_and_test_all'],
    ))
