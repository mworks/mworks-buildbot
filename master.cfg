# -*- python -*-
# ex: set syntax=python:

from buildbot.buildslave import BuildSlave
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.process.properties import Interpolate
from buildbot.scheduler import Nightly, Triggerable
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.status.html import WebStatus
from buildbot.status.web.auth import BasicAuth
from buildbot.status.web.authz import Authz
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import FileUpload
from buildbot.steps.trigger import Trigger

import master_config as config
from passwords import slave_pass, webstatus_pass



################################################################################
#
# General settings
#
################################################################################



c = BuildmasterConfig = {}

webstatus_port = 8010

c['projectName'] = 'MWorks'
c['projectURL'] = 'http://mworks-project.org/'
c['buildbotURL'] = 'http://%s:%d/' % (config.hostname, webstatus_port)

authz = Authz(
    auth = BasicAuth([('mwdev', webstatus_pass)]),
    forceBuild = True,
    pingBuilder = True,
    )

c['status'] = [WebStatus(http_port=webstatus_port, authz=authz)]

c['properties'] = {
    'MW_VERSION': 'TEST',
    }

installer_filename = 'MWorks-%(prop:MW_VERSION)s.dmg'
installer_slavesrc = '/tmp/mw_installer/' + installer_filename
installer_masterdest = ('/Library/WebServer/Documents/mw/' +
                        installer_filename)

mw_bin_dir = '/Library/Application Support/MWorks/Developer/bin/'



################################################################################
#
# Build slaves
#
################################################################################



primary_slavename = 'primary_build_and_test_slave'

slave_names = [
    primary_slavename,
    ]

c['slaves'] = [BuildSlave(name, slave_pass[name]) for name in slave_names]
c['slavePortnum'] = config.slave_port



################################################################################
#
# Build steps
#
################################################################################



build_builder_steps = (

    ('build_all', [

        Git(
            repourl = 'git://github.com/mworks/mw_suite.git',
            submodules = True,
            haltOnFailure = True,
            ),

        ShellCommand(
            workdir = 'build/mworks/build',
            command = [
                './build_mworks',
                Interpolate('--mw-version=%(prop:MW_VERSION)s'),
                ],
            description = ['building'],
            descriptionDone = ['build'],
            haltOnFailure = True,
            ),

        ShellCommand(
            workdir = 'build/mworks/build/installer',
            command = [
                './build_installer',
                Interpolate('%(prop:MW_VERSION)s'),
                ],
            description = ['building', 'installer'],
            descriptionDone = ['installer'],
            haltOnFailure = True,
            ),

        FileUpload(
            slavesrc = Interpolate(installer_slavesrc),
            masterdest = Interpolate(installer_masterdest),
            mode = 0644,
            ),

        ]),

    )


test_builder_steps = tuple(

    ('test_' + arch_name, [
            ShellCommand(
                command = [mw_bin_dir + 'mw_test', '--arch=' + arch_name],
                description = ['testing'],
                descriptionDone = ['test'],
                )
            ])
    for arch_name in ('x86_64', 'i386')

    )


aggregate_builder_steps = tuple(

    (builder_name, [
        Trigger(
            schedulerNames = [component_info[0]],
            waitForFinish = True,
            updateSourceStamp = False,
            copy_properties = ['MW_VERSION'],
            haltOnFailure = halt_on_failure,
            )
        for component_info in builder_steps
        ])
    for builder_name, builder_steps, halt_on_failure in
    (
        ('test_all', test_builder_steps, False),
        ('build_and_test_all', (('build_all',), ('test_all',)), True),
        )

    )



################################################################################
#
# Builders and schedulers
#
################################################################################



c['builders'] = []
c['schedulers'] = [] 


for builder_info in (build_builder_steps,
                     test_builder_steps,
                     aggregate_builder_steps):

    for builder_name, builder_steps in builder_info:
        c['builders'].append(BuilderConfig(
            name = builder_name,
            slavename = primary_slavename,
            factory = BuildFactory(builder_steps),
            ))

        c['schedulers'].append(Triggerable(
            name = builder_name,
            builderNames = [builder_name],
            ))


c['schedulers'].append(Nightly(
    name = 'nightly_build_and_test',
    builderNames = ['build_and_test_all'],
    branch = None,
    hour = 0,
    dayOfWeek = [0,1,2,3,4],  # Weekdays only
    properties = {
        'MW_VERSION': 'NIGHTLY',
        },
    ))


c['schedulers'].append(ForceScheduler(
    name = 'force_build_all',
    builderNames = ['build_all'],
    ))


c['schedulers'].append(ForceScheduler(
    name = 'force_test_all',
    builderNames = ['test_all'],
    ))


c['schedulers'].append(ForceScheduler(
    name = 'force_build_and_test_all',
    builderNames = ['build_and_test_all'],
    ))
